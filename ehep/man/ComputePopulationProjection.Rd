% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ehep_population_predict.R
\name{ComputePopulationProjection}
\alias{ComputePopulationProjection}
\title{Compute A Population Projection}
\usage{
ComputePopulationProjection(
  initialPopulation,
  populationChangeRates,
  years,
  normalize = NULL,
  growthFlag = TRUE
)
}
\arguments{
\item{initialPopulation}{Population structure. The expected format is

\if{html}{\out{<div class="sourceCode">}}\preformatted{List of 4
$ age   : num [1:101] 0 1 2 3 4 5 6 7 8 9 ...
$ female:Formal class 'PopulationPyramid' [package "ehep"] with 2 slots
.. ..@ length: int 101
.. ..@ values: num [1:101] 1739594 1677633 1647809 1617984 1588159 ...
$ male  :Formal class 'PopulationPyramid' [package "ehep"] with 2 slots
.. ..@ length: int 101
.. ..@ values: num [1:101] 1794566 1729423 1697431 1665439 1633447 ...
$ total :Formal class 'PopulationPyramid' [package "ehep"] with 2 slots
.. ..@ length: int 101
.. ..@ values: num [1:101] 3534160 3407056 3345240 3283423 3221606 ...
}\if{html}{\out{</div>}}}

\item{populationChangeRates}{Population change rates (both fertility and mortality)}

\item{years}{Vector of years to model}

\item{normalize}{Whether or not to normalize the initial population
default = NULL, meaning don't normalize. A numeric value means normalize
to that value.}

\item{growthFlag}{If FALSE, normalize each year to the same population as
the initial year (default = TRUE)}
}
\value{
Demographics time-series
}
\description{
Use an initial population pyramid and population change rates
to predict future population pyramids.
}
\examples{
\dontrun{
library(ehep)
ehep::Trace(TRUE)

ehep::InitializePopulation()
ehep::InitializeHealthcareTasks()
ehep::InitializeScenarios()
ehep::InitializeStochasticParameters()
ehep::InitializeSeasonality()

scenario <- "ScenarioName"

set.seed(54321)

scenarioData <- SaveBaseSettings(scenario)
ConfigureExperimentValues()

exp <- ehep:::EXP
gpe <- ehep:::GPE

population <- ComputePopulationProjection(
  exp$initialPopulation,
  exp$populationChangeRates,
  gpe$years,
  normalize = scenarioData$BaselinePop,
  growthFlag = scenarioData$o_PopGrowth
)
}
}
